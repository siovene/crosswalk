// Copyright (c) 2015 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Iotivity API
// 1:1 mapping to the C API.

namespace IotivityEleven {
    enum eOCStackResult {
        OC_STACK_OK,
        OC_STACK_RESOURCE_CREATED,
        OC_STACK_RESOURCE_DELETED,
        OC_STACK_CONTINUE,
        OC_STACK_INVALID_URI,
        OC_STACK_INVALID_QUERY,
        OC_STACK_INVALID_IP,
        OC_STACK_INVALID_PORT,
        OC_STACK_INVALID_CALLBACK,
        OC_STACK_INVALID_METHOD,
        OC_STACK_INVALID_PARAM,
        OC_STACK_INVALID_OBSERVE_PARAM,
        OC_STACK_NO_MEMORY,
        OC_STACK_COMM_ERROR,
        OC_STACK_TIMEOUT,
        OC_STACK_ADAPTER_NOT_ENABLED,
        OC_STACK_NOTIMPL,
        OC_STACK_NO_RESOURCE,
        OC_STACK_RESOURCE_ERROR,
        OC_STACK_SLOW_RESOURCE,
        OC_STACK_DUPLICATE_REQUEST,
        OC_STACK_NO_OBSERVERS,
        OC_STACK_OBSERVER_NOT_FOUND,
        OC_STACK_VIRTUAL_DO_NOT_HANDLE,
        OC_STACK_INVALID_OPTION,
        OC_STACK_MALFORMED_RESPONSE,
        OC_STACK_PERSISTENT_BUFFER_REQUIRED,
        OC_STACK_INVALID_REQUEST_HANDLE,
        OC_STACK_INVALID_DEVICE_INFO,
        OC_STACK_INVALID_JSON,
        OC_STACK_UNAUTHORIZED_REQ,
        OC_STACK_PRESENCE_STOPPED,
        OC_STACK_PRESENCE_TIMEOUT,
        OC_STACK_PRESENCE_DO_NOT_HANDLE,
        OC_STACK_ERROR
    };

    enum eOCMode {
        OC_CLIENT,
        OC_SERVER,
        OC_CLIENT_SERVER
    };

    enum eOCTransportFlags {
        OC_DEFAULT_FLAGS,
        OC_FLAG_SECURE,
        OC_IP_USE_V6,
        OC_IP_USE_V4,
        OC_RESERVED1,
        OC_SCOPE_INTERFACE,
        OC_SCOPE_LINK,
        OC_SCOPE_REALM,
        OC_SCOPE_ADMIN,
        OC_SCOPE_SITE,
        OC_SCOPE_ORG,
        OC_SCOPE_GLOBAL
    };

    callback eOCStackResultCallback = void (eOCStackResult result);

    interface Functions {
        [nodoc] static void eOCInit(
            DOMString ip, long port, eOCMode mode, eOCStackResultCallback cb);
        [nodoc] static void eOCStop(eOCStackResultCallback cb);
        [nodoc] static void eOCProcess(eOCStackResultCallback cb);
    };
};
